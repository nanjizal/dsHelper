<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/usr/local/lib/haxe/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta><m n=":native"><e>"Date"</e></m></meta>
	</class>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="47" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<hex public="1" set="method" line="426" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/local/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="dsHelper.DocdsHelper" params="" file="src/dsHelper/DocdsHelper.hx">
		<main public="1" set="method" line="7" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat10" params="" file="src/dsHelper/flat/f32/Float32Flat10.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat10.Float32Flat10_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat10.hx" private="1" module="dsHelper.flat.f32.Float32Flat10" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat10.Float32Flat10_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat10.hx" private="1" module="dsHelper.flat.f32.Float32Flat10" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat16" params="" file="src/dsHelper/flat/f32/Float32Flat16.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat16.Float32Flat16_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat16.hx" private="1" module="dsHelper.flat.f32.Float32Flat16" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat16.Float32Flat16_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat16.hx" private="1" module="dsHelper.flat.f32.Float32Flat16" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat2" params="" file="src/dsHelper/flat/f32/Float32Flat2.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat2.Float32Flat2_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat2.hx" private="1" module="dsHelper.flat.f32.Float32Flat2" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat2.Float32Flat2_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat2.hx" private="1" module="dsHelper.flat.f32.Float32Flat2" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat3" params="" file="src/dsHelper/flat/f32/Float32Flat3.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat3.Float32Flat3_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat3.hx" private="1" module="dsHelper.flat.f32.Float32Flat3" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat3.Float32Flat3_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat3.hx" private="1" module="dsHelper.flat.f32.Float32Flat3" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat4" params="" file="src/dsHelper/flat/f32/Float32Flat4.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat4.Float32Flat4_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat4.hx" private="1" module="dsHelper.flat.f32.Float32Flat4" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat4.Float32Flat4_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat4.hx" private="1" module="dsHelper.flat.f32.Float32Flat4" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat5" params="" file="src/dsHelper/flat/f32/Float32Flat5.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat5.Float32Flat5_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat5.hx" private="1" module="dsHelper.flat.f32.Float32Flat5" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat5.Float32Flat5_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat5.hx" private="1" module="dsHelper.flat.f32.Float32Flat5" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat6" params="" file="src/dsHelper/flat/f32/Float32Flat6.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat6.Float32Flat6_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat6.hx" private="1" module="dsHelper.flat.f32.Float32Flat6" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat6.Float32Flat6_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat6.hx" private="1" module="dsHelper.flat.f32.Float32Flat6" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat7" params="" file="src/dsHelper/flat/f32/Float32Flat7.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat7.Float32Flat7_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat7.hx" private="1" module="dsHelper.flat.f32.Float32Flat7" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat7.Float32Flat7_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat7.hx" private="1" module="dsHelper.flat.f32.Float32Flat7" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat8" params="" file="src/dsHelper/flat/f32/Float32Flat8.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat8.Float32Flat8_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat8.hx" private="1" module="dsHelper.flat.f32.Float32Flat8" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat8.Float32Flat8_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat8.hx" private="1" module="dsHelper.flat.f32.Float32Flat8" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat9" params="" file="src/dsHelper/flat/f32/Float32Flat9.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat9.Float32Flat9_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat9.hx" private="1" module="dsHelper.flat.f32.Float32Flat9" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat9.Float32Flat9_Impl_" params="" file="src/dsHelper/flat/f32/Float32Flat9.hx" private="1" module="dsHelper.flat.f32.Float32Flat9" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatRGBA" params="" file="src/dsHelper/flat/f32/Float32FlatRGBA.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="src/dsHelper/flat/f32/Float32FlatRGBA.hx" private="1" module="dsHelper.flat.f32.Float32FlatRGBA" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="34" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="44" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="50" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="65" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="73" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="81" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="86" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="90" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="94" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="src/dsHelper/flat/f32/Float32FlatRGBA.hx" private="1" module="dsHelper.flat.f32.Float32FlatRGBA" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="34" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="44" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="50" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="65" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="73" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="81" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="86" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="90" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="94" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatTriangle" params="" file="src/dsHelper/flat/f32/Float32FlatTriangle.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="src/dsHelper/flat/f32/Float32FlatTriangle.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangle" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="19" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="22" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="30" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="35" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="38" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="43" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="46" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="51" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="54" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="59" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="62" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="70" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="75" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="78" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="83" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="111" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="115" static="1">
		<f a="this:x">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="124" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="128" static="1">
		<f a="this:y">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="137" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="141" static="1">
		<f a="this:z">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="150" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="155" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="160" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="164" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="172" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="177" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="185" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="190" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="196" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="225" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="231" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="src/dsHelper/flat/f32/Float32FlatTriangle.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangle" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="19" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="22" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="30" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="35" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="38" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="43" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="46" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="51" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="54" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="59" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="62" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="70" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="75" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="78" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="83" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="111" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="115" static="1">
			<f a="this:x">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="124" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="128" static="1">
			<f a="this:y">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="137" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="141" static="1">
			<f a="this:z">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="150" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="155" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="160" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="164" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="172" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="177" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="185" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="190" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="196" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="225" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="231" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatTriangleXY" params="" file="src/dsHelper/flat/f32/Float32FlatTriangleXY.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat6"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatTriangleXY.Float32FlatTriangleXY_Impl_" params="" file="src/dsHelper/flat/f32/Float32FlatTriangleXY.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangleXY" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatTriangleXY"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="10" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="13" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="21" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="26" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="29" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="34" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="37" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="42" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="45" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="50" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="53" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<fromPosition public="1" get="inline" set="null" line="57" static="1">
		<f a="this:tri">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fromPosition>
	<triangle public="1" set="method" line="73" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="94" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="98" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="102" static="1">
		<f a="this:x">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="111" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="115" static="1">
		<f a="this:y">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="124" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="129" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<moveDelta set="method" line="133" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="141" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="146" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="154" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="159" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="165" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="194" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="200" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat6"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatTriangleXY.Float32FlatTriangleXY_Impl_" params="" file="src/dsHelper/flat/f32/Float32FlatTriangleXY.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangleXY" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatTriangleXY"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="10" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="13" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="21" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="26" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="29" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="34" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="37" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="42" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="45" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="50" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="53" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<fromPosition public="1" get="inline" set="null" line="57" static="1">
			<f a="this:tri">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fromPosition>
		<triangle public="1" set="method" line="73" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="94" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="98" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="102" static="1">
			<f a="this:x">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="111" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="115" static="1">
			<f a="this:y">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="124" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="129" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<moveDelta set="method" line="133" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="141" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="146" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="154" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="159" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="165" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="194" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="200" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat6"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat" params="" file="src/dsHelper/flat/float/FloatFlat.hx">
		<from><icast field="fromArray"><c path="Array"><x path="Float"/></c></icast></from>
		<this><c path="Array"><x path="Float"/></c></this>
		<to><icast field="toArray"><c path="Array"><x path="Float"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat.FloatFlat_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat.hx" private="1" module="dsHelper.flat.float.FloatFlat" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size get="inline" set="null" line="27" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size get="inline" set="null" line="32" static="1">
		<f a="this:id">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="38" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="42" static="1">
		<f a="this:id">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="48" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="52" static="1">
		<f a="this:pos_">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="63" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="80" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="dsHelper.flat.float.FloatFlat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="86" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="dsHelper.flat.float.FloatFlat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="92" static="1">
		<f a="this:arr">
			<c path="Array"><x path="Float"/></c>
			<c path="Array"><x path="Float"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat.FloatFlat_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat.hx" private="1" module="dsHelper.flat.float.FloatFlat" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size get="inline" set="null" line="27" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size get="inline" set="null" line="32" static="1">
			<f a="this:id">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="38" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="42" static="1">
			<f a="this:id">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="48" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="52" static="1">
			<f a="this:pos_">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="63" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="80" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="dsHelper.flat.float.FloatFlat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="86" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="dsHelper.flat.float.FloatFlat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="92" static="1">
			<f a="this:arr">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat10" params="" file="src/dsHelper/flat/float/FloatFlat10.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat10.FloatFlat10_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat10.hx" private="1" module="dsHelper.flat.float.FloatFlat10" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat10.FloatFlat10_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat10.hx" private="1" module="dsHelper.flat.float.FloatFlat10" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat16" params="" file="src/dsHelper/flat/float/FloatFlat16.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat16.FloatFlat16_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat16.hx" private="1" module="dsHelper.flat.float.FloatFlat16" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat16.FloatFlat16_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat16.hx" private="1" module="dsHelper.flat.float.FloatFlat16" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat2" params="" file="src/dsHelper/flat/float/FloatFlat2.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat2.FloatFlat2_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat2.hx" private="1" module="dsHelper.flat.float.FloatFlat2" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat2.FloatFlat2_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat2.hx" private="1" module="dsHelper.flat.float.FloatFlat2" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat3" params="" file="src/dsHelper/flat/float/FloatFlat3.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat3.FloatFlat3_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat3.hx" private="1" module="dsHelper.flat.float.FloatFlat3" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat3.FloatFlat3_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat3.hx" private="1" module="dsHelper.flat.float.FloatFlat3" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat4" params="" file="src/dsHelper/flat/float/FloatFlat4.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat4.FloatFlat4_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat4.hx" private="1" module="dsHelper.flat.float.FloatFlat4" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat4.FloatFlat4_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat4.hx" private="1" module="dsHelper.flat.float.FloatFlat4" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat5" params="" file="src/dsHelper/flat/float/FloatFlat5.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat5.FloatFlat5_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat5.hx" private="1" module="dsHelper.flat.float.FloatFlat5" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat5.FloatFlat5_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat5.hx" private="1" module="dsHelper.flat.float.FloatFlat5" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat6" params="" file="src/dsHelper/flat/float/FloatFlat6.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat6.FloatFlat6_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat6.hx" private="1" module="dsHelper.flat.float.FloatFlat6" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat6.FloatFlat6_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat6.hx" private="1" module="dsHelper.flat.float.FloatFlat6" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat7" params="" file="src/dsHelper/flat/float/FloatFlat7.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat7.FloatFlat7_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat7.hx" private="1" module="dsHelper.flat.float.FloatFlat7" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat7.FloatFlat7_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat7.hx" private="1" module="dsHelper.flat.float.FloatFlat7" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat8" params="" file="src/dsHelper/flat/float/FloatFlat8.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat8.FloatFlat8_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat8.hx" private="1" module="dsHelper.flat.float.FloatFlat8" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat8.FloatFlat8_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat8.hx" private="1" module="dsHelper.flat.float.FloatFlat8" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlat9" params="" file="src/dsHelper/flat/float/FloatFlat9.hx">
		<this><x path="dsHelper.flat.float.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlat9.FloatFlat9_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat9.hx" private="1" module="dsHelper.flat.float.FloatFlat9" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlat9.FloatFlat9_Impl_" params="" file="src/dsHelper/flat/float/FloatFlat9.hx" private="1" module="dsHelper.flat.float.FloatFlat9" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlatRGBA" params="" file="src/dsHelper/flat/float/FloatFlatRGBA.hx">
		<this><x path="dsHelper.flat.float.FloatFlat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlatRGBA.FloatFlatRGBA_Impl_" params="" file="src/dsHelper/flat/float/FloatFlatRGBA.hx" private="1" module="dsHelper.flat.float.FloatFlatRGBA" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="10" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="13" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="22" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="32" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="38" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="42" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="48" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="63" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="71" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="79" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="84" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="88" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="92" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="101" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="105" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="116" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="119" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="122" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="125" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlatRGBA.FloatFlatRGBA_Impl_" params="" file="src/dsHelper/flat/float/FloatFlatRGBA.hx" private="1" module="dsHelper.flat.float.FloatFlatRGBA" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="10" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="13" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="22" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="32" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="38" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="42" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="48" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="63" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="71" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="79" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="84" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="88" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="92" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="101" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="105" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="116" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="119" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="122" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="125" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flat.float.FloatFlatTriangle" params="" file="src/dsHelper/flat/float/FloatFlatTriangle.hx">
		<this><x path="dsHelper.flat.float.FloatFlat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.float._FloatFlatTriangle.FloatFlatTriangle_Impl_" params="" file="src/dsHelper/flat/float/FloatFlatTriangle.hx" private="1" module="dsHelper.flat.float.FloatFlatTriangle" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.float.FloatFlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="10" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="13" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="21" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="26" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="29" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="34" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="37" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="42" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="45" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="50" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="53" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="61" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="66" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="69" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="74" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="77" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="82" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="106" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="110" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="114" static="1">
		<f a="this:x">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="123" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="127" static="1">
		<f a="this:y">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="136" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="140" static="1">
		<f a="this:z">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="149" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="154" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="159" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="163" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="171" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="176" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="184" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="189" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="195" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="224" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="230" static="1">
		<f a="this">
			<x path="dsHelper.flat.float.FloatFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.float._FloatFlatTriangle.FloatFlatTriangle_Impl_" params="" file="src/dsHelper/flat/float/FloatFlatTriangle.hx" private="1" module="dsHelper.flat.float.FloatFlatTriangle" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.float.FloatFlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="10" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="13" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="21" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="26" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="29" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="34" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="37" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="42" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="45" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="50" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="53" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="61" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="66" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="69" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="74" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="77" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="82" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="106" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="110" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="114" static="1">
			<f a="this:x">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="123" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="127" static="1">
			<f a="this:y">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="136" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="140" static="1">
			<f a="this:z">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="149" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="154" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="159" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="163" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="171" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="176" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="184" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="189" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="195" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="224" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="230" static="1">
			<f a="this">
				<x path="dsHelper.flat.float.FloatFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat10" params="" file="src/dsHelper/flat/i32/Int32Flat10.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat10.Int32Flat10_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat10.hx" private="1" module="dsHelper.flat.i32.Int32Flat10" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat10.Int32Flat10_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat10.hx" private="1" module="dsHelper.flat.i32.Int32Flat10" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat16" params="" file="src/dsHelper/flat/i32/Int32Flat16.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat16.Int32Flat16_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat16.hx" private="1" module="dsHelper.flat.i32.Int32Flat16" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat16.Int32Flat16_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat16.hx" private="1" module="dsHelper.flat.i32.Int32Flat16" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat2" params="" file="src/dsHelper/flat/i32/Int32Flat2.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat2.Int32Flat2_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat2.hx" private="1" module="dsHelper.flat.i32.Int32Flat2" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat2.Int32Flat2_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat2.hx" private="1" module="dsHelper.flat.i32.Int32Flat2" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat3" params="" file="src/dsHelper/flat/i32/Int32Flat3.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat3.Int32Flat3_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat3.hx" private="1" module="dsHelper.flat.i32.Int32Flat3" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat3.Int32Flat3_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat3.hx" private="1" module="dsHelper.flat.i32.Int32Flat3" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat4" params="" file="src/dsHelper/flat/i32/Int32Flat4.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat4.Int32Flat4_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat4.hx" private="1" module="dsHelper.flat.i32.Int32Flat4" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat4.Int32Flat4_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat4.hx" private="1" module="dsHelper.flat.i32.Int32Flat4" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat5" params="" file="src/dsHelper/flat/i32/Int32Flat5.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat5.Int32Flat5_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat5.hx" private="1" module="dsHelper.flat.i32.Int32Flat5" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat5.Int32Flat5_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat5.hx" private="1" module="dsHelper.flat.i32.Int32Flat5" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat6" params="" file="src/dsHelper/flat/i32/Int32Flat6.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat6.Int32Flat6_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat6.hx" private="1" module="dsHelper.flat.i32.Int32Flat6" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat6.Int32Flat6_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat6.hx" private="1" module="dsHelper.flat.i32.Int32Flat6" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat7" params="" file="src/dsHelper/flat/i32/Int32Flat7.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat7.Int32Flat7_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat7.hx" private="1" module="dsHelper.flat.i32.Int32Flat7" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat7.Int32Flat7_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat7.hx" private="1" module="dsHelper.flat.i32.Int32Flat7" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat8" params="" file="src/dsHelper/flat/i32/Int32Flat8.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat8.Int32Flat8_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat8.hx" private="1" module="dsHelper.flat.i32.Int32Flat8" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat8.Int32Flat8_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat8.hx" private="1" module="dsHelper.flat.i32.Int32Flat8" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32Flat9" params="" file="src/dsHelper/flat/i32/Int32Flat9.hx">
		<this><x path="dsHelper.flat.io.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32Flat9.Int32Flat9_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat9.hx" private="1" module="dsHelper.flat.i32.Int32Flat9" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Int32Flat"/>
			<t path="dsHelper.haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32Flat9.Int32Flat9_Impl_" params="" file="src/dsHelper/flat/i32/Int32Flat9.hx" private="1" module="dsHelper.flat.i32.Int32Flat9" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Int32Flat"/>
				<t path="dsHelper.haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.i32.Int32FlatRGBA" params="" file="src/dsHelper/flat/i32/Int32FlatRGBA.hx">
		<this><x path="dsHelper.flat.i32.Int32Flat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32FlatRGBA.Int32FlatRGBA_Impl_" params="" file="src/dsHelper/flat/i32/Int32FlatRGBA.hx" private="1" module="dsHelper.flat.i32.Int32FlatRGBA" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32FlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="12" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="15" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="34" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="44" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="50" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="65" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="73" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="81" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="86" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="90" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="94" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32FlatRGBA.Int32FlatRGBA_Impl_" params="" file="src/dsHelper/flat/i32/Int32FlatRGBA.hx" private="1" module="dsHelper.flat.i32.Int32FlatRGBA" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32FlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="12" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="15" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="34" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="44" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="50" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="65" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="73" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="81" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="86" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="90" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="94" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flat.i32.Int32FlatTriangle" params="" file="src/dsHelper/flat/i32/Int32FlatTriangle.hx">
		<this><x path="dsHelper.flat.i32.Int32Flat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.i32._Int32FlatTriangle.Int32FlatTriangle_Impl_" params="" file="src/dsHelper/flat/i32/Int32FlatTriangle.hx" private="1" module="dsHelper.flat.i32.Int32FlatTriangle" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.i32.Int32FlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="19" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="22" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="30" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="35" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="38" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="43" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="46" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="51" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="54" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="59" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="62" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="70" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="75" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="78" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="83" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="111" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="115" static="1">
		<f a="this:x_">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="124" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="128" static="1">
		<f a="this:y_">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="137" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="141" static="1">
		<f a="this:z_">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="150" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="155" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="160" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<minInt3 get="inline" set="null" line="164" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></minInt3>
	<maxInt3 get="inline" set="null" line="180" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></maxInt3>
	<moveDelta get="inline" set="null" line="196" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="205" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="210" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="218" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="223" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="229" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="264" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="270" static="1">
		<f a="this">
			<x path="dsHelper.flat.i32.Int32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.i32._Int32FlatTriangle.Int32FlatTriangle_Impl_" params="" file="src/dsHelper/flat/i32/Int32FlatTriangle.hx" private="1" module="dsHelper.flat.i32.Int32FlatTriangle" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.i32.Int32FlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="19" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="22" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="30" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="35" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="38" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="43" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="46" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="51" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="54" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="59" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="62" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="70" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="75" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="78" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="83" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="111" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="115" static="1">
			<f a="this:x_">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="124" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="128" static="1">
			<f a="this:y_">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="137" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="141" static="1">
			<f a="this:z_">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="150" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="155" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="160" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<minInt3 get="inline" set="null" line="164" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></minInt3>
		<maxInt3 get="inline" set="null" line="180" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></maxInt3>
		<moveDelta get="inline" set="null" line="196" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="205" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="210" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="218" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="223" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="229" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="264" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="270" static="1">
			<f a="this">
				<x path="dsHelper.flat.i32.Int32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat" params="" file="src/dsHelper/flat/int/IntFlat.hx">
		<from><icast field="fromArray"><c path="Array"><x path="Int"/></c></icast></from>
		<this><c path="Array"><x path="Int"/></c></this>
		<to><icast field="toArray"><c path="Array"><x path="Int"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat.IntFlat_Impl_" params="" file="src/dsHelper/flat/int/IntFlat.hx" private="1" module="dsHelper.flat.int.IntFlat" final="1">
	<readItem public="1" get="inline" set="null" line="7" static="1">
		<f a="this:k">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="12" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size get="inline" set="null" line="24" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size get="inline" set="null" line="28" static="1">
		<f a="this:id">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="34" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="38" static="1">
		<f a="this:pos_">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="44" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="51" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="66" static="1">
		<f a="arr">
			<c path="Array"><x path="Int"/></c>
			<x path="dsHelper.flat.int.IntFlat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="dsHelper.flat.int.IntFlat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="78" static="1">
		<f a="this:arr">
			<c path="Array"><x path="Int"/></c>
			<c path="Array"><x path="Int"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat.IntFlat_Impl_" params="" file="src/dsHelper/flat/int/IntFlat.hx" private="1" module="dsHelper.flat.int.IntFlat" final="1">
		<readItem public="1" get="inline" set="null" line="7" static="1">
			<f a="this:k">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="12" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size get="inline" set="null" line="24" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size get="inline" set="null" line="28" static="1">
			<f a="this:id">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="34" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="38" static="1">
			<f a="this:pos_">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="44" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="51" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="66" static="1">
			<f a="arr">
				<c path="Array"><x path="Int"/></c>
				<x path="dsHelper.flat.int.IntFlat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="dsHelper.flat.int.IntFlat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="78" static="1">
			<f a="this:arr">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat10" params="" file="src/dsHelper/flat/int/IntFlat10.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat10.IntFlat10_Impl_" params="" file="src/dsHelper/flat/int/IntFlat10.hx" private="1" module="dsHelper.flat.int.IntFlat10" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat10.IntFlat10_Impl_" params="" file="src/dsHelper/flat/int/IntFlat10.hx" private="1" module="dsHelper.flat.int.IntFlat10" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat16" params="" file="src/dsHelper/flat/int/IntFlat16.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat16.IntFlat16_Impl_" params="" file="src/dsHelper/flat/int/IntFlat16.hx" private="1" module="dsHelper.flat.int.IntFlat16" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat16.IntFlat16_Impl_" params="" file="src/dsHelper/flat/int/IntFlat16.hx" private="1" module="dsHelper.flat.int.IntFlat16" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat2" params="" file="src/dsHelper/flat/int/IntFlat2.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat2.IntFlat2_Impl_" params="" file="src/dsHelper/flat/int/IntFlat2.hx" private="1" module="dsHelper.flat.int.IntFlat2" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat2.IntFlat2_Impl_" params="" file="src/dsHelper/flat/int/IntFlat2.hx" private="1" module="dsHelper.flat.int.IntFlat2" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat3" params="" file="src/dsHelper/flat/int/IntFlat3.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat3.IntFlat3_Impl_" params="" file="src/dsHelper/flat/int/IntFlat3.hx" private="1" module="dsHelper.flat.int.IntFlat3" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat3.IntFlat3_Impl_" params="" file="src/dsHelper/flat/int/IntFlat3.hx" private="1" module="dsHelper.flat.int.IntFlat3" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat4" params="" file="src/dsHelper/flat/int/IntFlat4.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat4.IntFlat4_Impl_" params="" file="src/dsHelper/flat/int/IntFlat4.hx" private="1" module="dsHelper.flat.int.IntFlat4" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat4.IntFlat4_Impl_" params="" file="src/dsHelper/flat/int/IntFlat4.hx" private="1" module="dsHelper.flat.int.IntFlat4" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat5" params="" file="src/dsHelper/flat/int/IntFlat5.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat5.IntFlat5_Impl_" params="" file="src/dsHelper/flat/int/IntFlat5.hx" private="1" module="dsHelper.flat.int.IntFlat5" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat5.IntFlat5_Impl_" params="" file="src/dsHelper/flat/int/IntFlat5.hx" private="1" module="dsHelper.flat.int.IntFlat5" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat6" params="" file="src/dsHelper/flat/int/IntFlat6.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat6.IntFlat6_Impl_" params="" file="src/dsHelper/flat/int/IntFlat6.hx" private="1" module="dsHelper.flat.int.IntFlat6" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat6.IntFlat6_Impl_" params="" file="src/dsHelper/flat/int/IntFlat6.hx" private="1" module="dsHelper.flat.int.IntFlat6" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat7" params="" file="src/dsHelper/flat/int/IntFlat7.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat7.IntFlat7_Impl_" params="" file="src/dsHelper/flat/int/IntFlat7.hx" private="1" module="dsHelper.flat.int.IntFlat7" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat7.IntFlat7_Impl_" params="" file="src/dsHelper/flat/int/IntFlat7.hx" private="1" module="dsHelper.flat.int.IntFlat7" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat8" params="" file="src/dsHelper/flat/int/IntFlat8.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat8.IntFlat8_Impl_" params="" file="src/dsHelper/flat/int/IntFlat8.hx" private="1" module="dsHelper.flat.int.IntFlat8" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat8.IntFlat8_Impl_" params="" file="src/dsHelper/flat/int/IntFlat8.hx" private="1" module="dsHelper.flat.int.IntFlat8" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlat9" params="" file="src/dsHelper/flat/int/IntFlat9.hx">
		<this><x path="dsHelper.flat.int.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlat9.IntFlat9_Impl_" params="" file="src/dsHelper/flat/int/IntFlat9.hx" private="1" module="dsHelper.flat.int.IntFlat9" final="1">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.int.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlat9.IntFlat9_Impl_" params="" file="src/dsHelper/flat/int/IntFlat9.hx" private="1" module="dsHelper.flat.int.IntFlat9" final="1">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.int.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.int.IntFlatRGBA" params="" file="src/dsHelper/flat/int/IntFlatRGBA.hx">
		<this><x path="dsHelper.flat.int.IntFlat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlatRGBA.IntFlatRGBA_Impl_" params="" file="src/dsHelper/flat/int/IntFlatRGBA.hx" private="1" module="dsHelper.flat.int.IntFlatRGBA" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="23" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="33" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="43" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="49" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="64" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="72" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="80" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="85" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="89" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="93" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlatRGBA.IntFlatRGBA_Impl_" params="" file="src/dsHelper/flat/int/IntFlatRGBA.hx" private="1" module="dsHelper.flat.int.IntFlatRGBA" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="23" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="33" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="43" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="49" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="64" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="72" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="80" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="85" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="89" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="93" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flat.int.IntFlatTriangle" params="" file="src/dsHelper/flat/int/IntFlatTriangle.hx">
		<this><x path="dsHelper.flat.int.IntFlat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.int._IntFlatTriangle.IntFlatTriangle_Impl_" params="" file="src/dsHelper/flat/int/IntFlatTriangle.hx" private="1" module="dsHelper.flat.int.IntFlatTriangle" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.int.IntFlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="10" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="13" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="18" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="21" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="26" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="29" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="34" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="37" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="42" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="45" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="50" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="53" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="61" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="66" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="69" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="74" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="77" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="82" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="106" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="110" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="114" static="1">
		<f a="this:x_">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="123" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="127" static="1">
		<f a="this:y_">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="136" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="140" static="1">
		<f a="this:z_">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="149" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="154" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="159" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<minInt3 get="inline" set="null" line="163" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></minInt3>
	<maxInt3 get="inline" set="null" line="179" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></maxInt3>
	<moveDelta get="inline" set="null" line="195" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="204" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="209" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="217" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="222" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="228" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="263" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="269" static="1">
		<f a="this">
			<x path="dsHelper.flat.int.IntFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.int._IntFlatTriangle.IntFlatTriangle_Impl_" params="" file="src/dsHelper/flat/int/IntFlatTriangle.hx" private="1" module="dsHelper.flat.int.IntFlatTriangle" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.int.IntFlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="10" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="13" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="18" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="21" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="26" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="29" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="34" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="37" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="42" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="45" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="50" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="53" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="61" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="66" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="69" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="74" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="77" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="82" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="106" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="110" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="114" static="1">
			<f a="this:x_">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="123" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="127" static="1">
			<f a="this:y_">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="136" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="140" static="1">
			<f a="this:z_">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="149" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="154" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="159" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<minInt3 get="inline" set="null" line="163" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></minInt3>
		<maxInt3 get="inline" set="null" line="179" static="1"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></maxInt3>
		<moveDelta get="inline" set="null" line="195" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="204" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="209" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="217" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="222" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="228" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="263" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="269" static="1">
			<f a="this">
				<x path="dsHelper.flat.int.IntFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="dsHelper.flat.io.Float32Flat" params="" file="src/dsHelper/flat/io/Float32Flat.hx">
		<from><icast field="fromArray"><t path="dsHelper.haxe.io.Float32Array"/></icast></from>
		<this><t path="dsHelper.haxe.io.Float32Array"/></this>
		<to><icast field="toArray"><x path="haxe.io.Float32Array"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.io._Float32Flat.Float32Flat_Impl_" params="" file="src/dsHelper/flat/io/Float32Flat.hx" private="1" module="dsHelper.flat.io.Float32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="17" static="1">
		<f a="this:k">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="30" static="1">
		<f a="this:k:v">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</writeItem>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size set="method" line="44" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size set="method" line="49" static="1">
		<f a="this:id">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="58" static="1">
		<f a="this:id">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="68" static="1">
		<f a="this:pos_">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="74" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="94" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="104" static="1">
		<f a="arr">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="110" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="116" static="1">
		<f a="this:arr">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.io._Float32Flat.Float32Flat_Impl_" params="" file="src/dsHelper/flat/io/Float32Flat.hx" private="1" module="dsHelper.flat.io.Float32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="17" static="1">
			<f a="this:k">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="30" static="1">
			<f a="this:k:v">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</writeItem>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size set="method" line="44" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size set="method" line="49" static="1">
			<f a="this:id">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="58" static="1">
			<f a="this:id">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="68" static="1">
			<f a="this:pos_">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="74" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="94" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="104" static="1">
			<f a="arr">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="110" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="116" static="1">
			<f a="this:arr">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.io.Float32FlatDepth" params="" file="src/dsHelper/flat/io/Float32FlatDepth.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="src/dsHelper/flat/io/Float32FlatDepth.hx" private="1" module="dsHelper.flat.io.Float32FlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<rangeToEnd public="1" set="method" line="11" static="1">
		<f a="this:starting:totalLen:section">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="30" static="1">
		<f a="this:starting:totalLen">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rangeToStart>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="src/dsHelper/flat/io/Float32FlatDepth.hx" private="1" module="dsHelper.flat.io.Float32FlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<rangeToEnd public="1" set="method" line="11" static="1">
			<f a="this:starting:totalLen:section">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="30" static="1">
			<f a="this:starting:totalLen">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rangeToStart>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.io.Int32Flat" params="" file="src/dsHelper/flat/io/Int32Flat.hx">
		<from>
			<icast><x path="haxe.io.Int32Array"/></icast>
			<icast field="fromArray"><x path="haxe.io.Int32Array"/></icast>
		</from>
		<this><x path="haxe.io.Int32Array"/></this>
		<to>
			<icast><x path="haxe.io.Int32Array"/></icast>
			<icast field="toArray"><x path="haxe.io.Int32Array"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.io._Int32Flat.Int32Flat_Impl_" params="" file="src/dsHelper/flat/io/Int32Flat.hx" private="1" module="dsHelper.flat.io.Int32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.io.Int32Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size get="inline" set="null" line="25" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size get="inline" set="null" line="29" static="1">
		<f a="this:id">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="39" static="1">
		<f a="this:pos_">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="45" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="67" static="1">
		<f a="arr">
			<x path="haxe.io.Int32Array"/>
			<x path="dsHelper.flat.io.Int32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="73" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="dsHelper.flat.io.Int32Flat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="79" static="1">
		<f a="this:arr">
			<x path="haxe.io.Int32Array"/>
			<x path="haxe.io.Int32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.io._Int32Flat.Int32Flat_Impl_" params="" file="src/dsHelper/flat/io/Int32Flat.hx" private="1" module="dsHelper.flat.io.Int32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.io.Int32Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size get="inline" set="null" line="25" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size get="inline" set="null" line="29" static="1">
			<f a="this:id">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="39" static="1">
			<f a="this:pos_">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="45" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="67" static="1">
			<f a="arr">
				<x path="haxe.io.Int32Array"/>
				<x path="dsHelper.flat.io.Int32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="73" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="dsHelper.flat.io.Int32Flat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="79" static="1">
			<f a="this:arr">
				<x path="haxe.io.Int32Array"/>
				<x path="haxe.io.Int32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
	</class>
	<abstract path="dsHelper.flat.io.UInt16Flat" params="" file="src/dsHelper/flat/io/UInt16Flat.hx">
		<from><icast field="fromArray"><x path="haxe.io.UInt16Array"/></icast></from>
		<this><x path="haxe.io.UInt16Array"/></this>
		<to>
			<icast><x path="haxe.io.UInt16Array"/></icast>
			<icast><x path="haxe.io.UInt16Array"/></icast>
			<icast field="toArray"><x path="haxe.io.UInt16Array"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.io._UInt16Flat.UInt16Flat_Impl_" params="" file="src/dsHelper/flat/io/UInt16Flat.hx" private="1" module="dsHelper.flat.io.UInt16Flat" final="1">
	<readItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="15" static="1">
		<f a="this:k:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.io.UInt16Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size get="inline" set="null" line="33" static="1">
		<f a="this:id">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="43" static="1">
		<f a="this:pos_">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<setLength get="inline" set="null" line="49" static="1">
		<f a="this:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setLength>
	<setPos get="inline" set="null" line="53" static="1">
		<f a="this:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setPos>
	<getDual16 get="inline" set="null" line="57" static="1">
		<f a="this:i">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getDual16>
	<setDual16 get="inline" set="null" line="61" static="1">
		<f a="this:i:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setDual16>
	<upper16 get="inline" set="null" line="66" static="1">
		<f a="this:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</upper16>
	<lower16 get="inline" set="null" line="70" static="1">
		<f a="this:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lower16>
	<updateLen get="inline" set="null" line="74" static="1">
		<f a="this:pos_">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="84" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="89" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="94" static="1">
		<f a="arr">
			<x path="haxe.io.UInt16Array"/>
			<x path="dsHelper.flat.io.UInt16Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="100" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="106" static="1">
		<f a="this:arr">
			<x path="haxe.io.UInt16Array"/>
			<x path="haxe.io.UInt16Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.io._UInt16Flat.UInt16Flat_Impl_" params="" file="src/dsHelper/flat/io/UInt16Flat.hx" private="1" module="dsHelper.flat.io.UInt16Flat" final="1">
		<readItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="15" static="1">
			<f a="this:k:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.io.UInt16Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size get="inline" set="null" line="33" static="1">
			<f a="this:id">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="43" static="1">
			<f a="this:pos_">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<setLength get="inline" set="null" line="49" static="1">
			<f a="this:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setLength>
		<setPos get="inline" set="null" line="53" static="1">
			<f a="this:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setPos>
		<getDual16 get="inline" set="null" line="57" static="1">
			<f a="this:i">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getDual16>
		<setDual16 get="inline" set="null" line="61" static="1">
			<f a="this:i:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setDual16>
		<upper16 get="inline" set="null" line="66" static="1">
			<f a="this:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</upper16>
		<lower16 get="inline" set="null" line="70" static="1">
			<f a="this:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lower16>
		<updateLen get="inline" set="null" line="74" static="1">
			<f a="this:pos_">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="84" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="89" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="94" static="1">
			<f a="arr">
				<x path="haxe.io.UInt16Array"/>
				<x path="dsHelper.flat.io.UInt16Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="100" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="106" static="1">
			<f a="this:arr">
				<x path="haxe.io.UInt16Array"/>
				<x path="haxe.io.UInt16Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat10" params="" file="src/dsHelper/flat/ui16/UInt16Flat10.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat10.UInt16Flat10_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat10.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat10" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat10.UInt16Flat10_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat10.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat10" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat16" params="" file="src/dsHelper/flat/ui16/UInt16Flat16.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat16.UInt16Flat16_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat16.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat16" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat16.UInt16Flat16_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat16.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat16" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat2" params="" file="src/dsHelper/flat/ui16/UInt16Flat2.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat2.UInt16Flat2_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat2.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat2" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat2.UInt16Flat2_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat2.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat2" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat3" params="" file="src/dsHelper/flat/ui16/UInt16Flat3.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat3.UInt16Flat3_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat3.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat3" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat3.UInt16Flat3_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat3.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat3" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat4" params="" file="src/dsHelper/flat/ui16/UInt16Flat4.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat4.UInt16Flat4_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat4.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat4" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat4.UInt16Flat4_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat4.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat4" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat5" params="" file="src/dsHelper/flat/ui16/UInt16Flat5.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat5.UInt16Flat5_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat5.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat5" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat5.UInt16Flat5_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat5.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat5" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat6" params="" file="src/dsHelper/flat/ui16/UInt16Flat6.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat6.UInt16Flat6_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat6.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat6" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat6.UInt16Flat6_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat6.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat6" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat7" params="" file="src/dsHelper/flat/ui16/UInt16Flat7.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat7.UInt16Flat7_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat7.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat7" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat7.UInt16Flat7_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat7.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat7" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat8" params="" file="src/dsHelper/flat/ui16/UInt16Flat8.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat8.UInt16Flat8_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat8.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat8" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat8.UInt16Flat8_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat8.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat8" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.ui16.UInt16Flat9" params="" file="src/dsHelper/flat/ui16/UInt16Flat9.hx">
		<this><x path="dsHelper.flat.io.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.ui16._UInt16Flat9.UInt16Flat9_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat9.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat9" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.ui16.UInt16Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.UInt16Flat"/>
			<t path="dsHelper.haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.ui16._UInt16Flat9.UInt16Flat9_Impl_" params="" file="src/dsHelper/flat/ui16/UInt16Flat9.hx" private="1" module="dsHelper.flat.ui16.UInt16Flat9" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.ui16.UInt16Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.UInt16Flat"/>
				<t path="dsHelper.haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flatInterleave.FloatColorTriangles" params="" file="src/dsHelper/flatInterleave/FloatColorTriangles.hx">
		<this><x path="dsHelper.flatInterleave.core.Flat3x7"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="src/dsHelper/flatInterleave/FloatColorTriangles.hx" private="1" module="dsHelper.flatInterleave.FloatColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="13" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="16" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="32" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<redA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redA>
	<get_redA set="method" line="38" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redA>
	<set_redA set="method" line="41" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenA>
	<get_greenA get="inline" set="null" line="47" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenA>
	<set_greenA get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueA>
	<get_blueA get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueA>
	<set_blueA get="inline" set="null" line="61" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaA>
	<get_alphaA get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaA>
	<set_alphaA get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="78" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="81" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="86" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="89" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="94" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="97" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<redB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redB>
	<get_redB set="method" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redB>
	<set_redB set="method" line="106" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenB>
	<get_greenB get="inline" set="null" line="112" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenB>
	<set_greenB get="inline" set="null" line="116" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueB>
	<get_blueB get="inline" set="null" line="122" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueB>
	<set_blueB get="inline" set="null" line="126" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaB>
	<get_alphaB get="inline" set="null" line="132" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaB>
	<set_alphaB get="inline" set="null" line="136" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="143" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="146" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="151" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="154" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="159" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="162" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<redC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redC>
	<get_redC set="method" line="168" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redC>
	<set_redC set="method" line="171" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenC>
	<get_greenC get="inline" set="null" line="177" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenC>
	<set_greenC get="inline" set="null" line="181" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueC>
	<get_blueC get="inline" set="null" line="187" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueC>
	<set_blueC get="inline" set="null" line="191" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaC>
	<get_alphaC get="inline" set="null" line="197" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaC>
	<set_alphaC get="inline" set="null" line="201" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaC>
	<triangle public="1" set="method" line="207" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="231" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="235" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="239" static="1">
		<f a="this:x">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="248" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="252" static="1">
		<f a="this:y">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="265" static="1">
		<f a="this:z">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="274" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="279" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="284" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="288" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="296" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="300" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</distHit>
	<liteHit public="1" get="inline" set="null" line="309" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="317" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="322" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="328" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="357" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="364" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<rgb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="371" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbA>
	<set_rgbA get="inline" set="null" line="379" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbA>
	<get_rgbA get="inline" set="null" line="387" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbB>
	<set_rgbB get="inline" set="null" line="394" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbB>
	<get_rgbB get="inline" set="null" line="402" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbC>
	<set_rgbC get="inline" set="null" line="409" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbC>
	<get_rgbC get="inline" set="null" line="417" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbC>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="424" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="432" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="440" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="448" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="456" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="464" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="472" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="479" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="485" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAllVert>
	<hex public="1" get="inline" set="null" line="496" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexA public="1" get="inline" set="null" line="500" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexA>
	<hexB public="1" get="inline" set="null" line="504" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexB>
	<hexC public="1" get="inline" set="null" line="508" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexC>
	<hexAll public="1" get="inline" set="null" line="512" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="523" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="526" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="529" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="532" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="src/dsHelper/flatInterleave/FloatColorTriangles.hx" private="1" module="dsHelper.flatInterleave.FloatColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="13" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="16" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="32" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<redA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redA>
		<get_redA set="method" line="38" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redA>
		<set_redA set="method" line="41" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenA>
		<get_greenA get="inline" set="null" line="47" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenA>
		<set_greenA get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueA>
		<get_blueA get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueA>
		<set_blueA get="inline" set="null" line="61" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaA>
		<get_alphaA get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaA>
		<set_alphaA get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="78" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="81" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="86" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="89" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="94" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="97" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<redB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redB>
		<get_redB set="method" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redB>
		<set_redB set="method" line="106" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenB>
		<get_greenB get="inline" set="null" line="112" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenB>
		<set_greenB get="inline" set="null" line="116" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueB>
		<get_blueB get="inline" set="null" line="122" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueB>
		<set_blueB get="inline" set="null" line="126" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaB>
		<get_alphaB get="inline" set="null" line="132" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaB>
		<set_alphaB get="inline" set="null" line="136" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="143" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="146" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="151" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="154" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="159" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="162" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<redC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redC>
		<get_redC set="method" line="168" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redC>
		<set_redC set="method" line="171" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenC>
		<get_greenC get="inline" set="null" line="177" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenC>
		<set_greenC get="inline" set="null" line="181" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueC>
		<get_blueC get="inline" set="null" line="187" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueC>
		<set_blueC get="inline" set="null" line="191" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaC>
		<get_alphaC get="inline" set="null" line="197" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaC>
		<set_alphaC get="inline" set="null" line="201" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaC>
		<triangle public="1" set="method" line="207" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="231" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="235" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="239" static="1">
			<f a="this:x">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="248" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="252" static="1">
			<f a="this:y">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="265" static="1">
			<f a="this:z">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="274" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="279" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="284" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="288" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="296" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="300" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</distHit>
		<liteHit public="1" get="inline" set="null" line="309" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="317" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="322" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="328" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="357" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="364" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<rgb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="371" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbA>
		<set_rgbA get="inline" set="null" line="379" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbA>
		<get_rgbA get="inline" set="null" line="387" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbB>
		<set_rgbB get="inline" set="null" line="394" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbB>
		<get_rgbB get="inline" set="null" line="402" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbC>
		<set_rgbC get="inline" set="null" line="409" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbC>
		<get_rgbC get="inline" set="null" line="417" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbC>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="424" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="432" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="440" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="448" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="456" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="464" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="472" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="479" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="485" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAllVert>
		<hex public="1" get="inline" set="null" line="496" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexA public="1" get="inline" set="null" line="500" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexA>
		<hexB public="1" get="inline" set="null" line="504" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexB>
		<hexC public="1" get="inline" set="null" line="508" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexC>
		<hexAll public="1" get="inline" set="null" line="512" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="523" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="526" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="529" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="532" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flatInterleave.FloatColorTrianglesUV" params="" file="src/dsHelper/flatInterleave/FloatColorTrianglesUV.hx">
		<from><icast><x path="dsHelper.flatInterleave.core.Flat3x9"/></icast></from>
		<this><x path="dsHelper.flatInterleave.core.Flat3x9"/></this>
		<to><icast><x path="dsHelper.flatInterleave.core.Flat3x9"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave._FloatColorTrianglesUV.FloatColorTrianglesUV_Impl_" params="" file="src/dsHelper/flatInterleave/FloatColorTrianglesUV.hx" private="1" module="dsHelper.flatInterleave.FloatColorTrianglesUV" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.FloatColorTrianglesUV"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTrianglesUV"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="13" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="16" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="32" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<redA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redA>
	<get_redA set="method" line="38" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redA>
	<set_redA set="method" line="41" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenA>
	<get_greenA get="inline" set="null" line="47" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenA>
	<set_greenA get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueA>
	<get_blueA get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueA>
	<set_blueA get="inline" set="null" line="61" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaA>
	<get_alphaA get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaA>
	<set_alphaA get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaA>
	<uA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</uA>
	<get_uA get="inline" set="null" line="77" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_uA>
	<set_uA get="inline" set="null" line="81" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_uA>
	<vA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</vA>
	<get_vA get="inline" set="null" line="87" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_vA>
	<set_vA get="inline" set="null" line="91" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_vA>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="98" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="101" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="106" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="109" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="114" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="117" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<redB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redB>
	<get_redB set="method" line="123" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redB>
	<set_redB set="method" line="126" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenB>
	<get_greenB get="inline" set="null" line="132" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenB>
	<set_greenB get="inline" set="null" line="136" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueB>
	<get_blueB get="inline" set="null" line="142" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueB>
	<set_blueB get="inline" set="null" line="146" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaB>
	<get_alphaB get="inline" set="null" line="152" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaB>
	<set_alphaB get="inline" set="null" line="156" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaB>
	<uB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</uB>
	<get_uB get="inline" set="null" line="162" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_uB>
	<set_uB get="inline" set="null" line="166" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_uB>
	<vB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</vB>
	<get_vB get="inline" set="null" line="172" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_vB>
	<set_vB get="inline" set="null" line="176" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_vB>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="183" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="186" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="191" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="194" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="199" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="202" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<redC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redC>
	<get_redC set="method" line="208" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redC>
	<set_redC set="method" line="211" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenC>
	<get_greenC get="inline" set="null" line="217" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenC>
	<set_greenC get="inline" set="null" line="221" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueC>
	<get_blueC get="inline" set="null" line="227" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueC>
	<set_blueC get="inline" set="null" line="231" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaC>
	<get_alphaC get="inline" set="null" line="237" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaC>
	<set_alphaC get="inline" set="null" line="241" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaC>
	<uC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</uC>
	<get_uC get="inline" set="null" line="247" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_uC>
	<set_uC get="inline" set="null" line="251" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_uC>
	<vC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</vC>
	<get_vC get="inline" set="null" line="257" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_vC>
	<set_vC get="inline" set="null" line="261" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_vC>
	<triangle public="1" set="method" line="268" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<triangleUV public="1" set="method" line="293" static="1">
		<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangleUV>
	<adjustWinding public="1" set="method" line="313" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<u public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</u>
	<get_u get="inline" set="null" line="317" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_u>
	<set_u get="inline" set="null" line="321" static="1">
		<f a="this:u_">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_u>
	<v public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</v>
	<get_v get="inline" set="null" line="330" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_v>
	<set_v get="inline" set="null" line="334" static="1">
		<f a="this:v_">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_v>
	<rightU public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</rightU>
	<get_rightU get="inline" set="null" line="344" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rightU>
	<bottomV public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottomV>
	<get_bottomV get="inline" set="null" line="349" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottomV>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="355" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="359" static="1">
		<f a="this:x">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="368" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="372" static="1">
		<f a="this:y">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="381" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="385" static="1">
		<f a="this:z">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="394" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="399" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="404" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="408" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="416" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="421" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="429" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<distHit public="1" set="method" line="434" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</distHit>
	<moveDeltaUV set="method" line="442" static="1">
		<f a="this:du:dv">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDeltaUV>
	<rotate public="1" get="inline" set="null" line="450" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="456" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="485" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="489" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<rgb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="496" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbA>
	<set_rgbA get="inline" set="null" line="504" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbA>
	<get_rgbA get="inline" set="null" line="512" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbB>
	<set_rgbB get="inline" set="null" line="519" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbB>
	<get_rgbB get="inline" set="null" line="527" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbC>
	<set_rgbC get="inline" set="null" line="534" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbC>
	<get_rgbC get="inline" set="null" line="542" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbC>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="549" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="558" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="566" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="575" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="583" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="591" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="599" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="606" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="612" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAllVert>
	<hex public="1" get="inline" set="null" line="623" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexA public="1" get="inline" set="null" line="627" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexA>
	<hexB public="1" get="inline" set="null" line="631" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexB>
	<hexC public="1" get="inline" set="null" line="635" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexC>
	<hexAll public="1" get="inline" set="null" line="639" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<prettyStringUV public="1" get="inline" set="null" line="650" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringUV>
	<prettyAlluv public="1" get="inline" set="null" line="656" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAlluv>
	<prettyEverything public="1" get="inline" set="null" line="667" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyEverything>
	<alphaChannel public="1" get="inline" set="null" line="680" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="683" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="686" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="689" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave._FloatColorTrianglesUV.FloatColorTrianglesUV_Impl_" params="" file="src/dsHelper/flatInterleave/FloatColorTrianglesUV.hx" private="1" module="dsHelper.flatInterleave.FloatColorTrianglesUV" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.FloatColorTrianglesUV"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTrianglesUV"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="13" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="16" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="32" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<redA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redA>
		<get_redA set="method" line="38" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redA>
		<set_redA set="method" line="41" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenA>
		<get_greenA get="inline" set="null" line="47" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenA>
		<set_greenA get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueA>
		<get_blueA get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueA>
		<set_blueA get="inline" set="null" line="61" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaA>
		<get_alphaA get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaA>
		<set_alphaA get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaA>
		<uA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</uA>
		<get_uA get="inline" set="null" line="77" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_uA>
		<set_uA get="inline" set="null" line="81" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_uA>
		<vA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</vA>
		<get_vA get="inline" set="null" line="87" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_vA>
		<set_vA get="inline" set="null" line="91" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_vA>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="98" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="101" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="106" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="109" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="114" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="117" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<redB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redB>
		<get_redB set="method" line="123" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redB>
		<set_redB set="method" line="126" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenB>
		<get_greenB get="inline" set="null" line="132" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenB>
		<set_greenB get="inline" set="null" line="136" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueB>
		<get_blueB get="inline" set="null" line="142" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueB>
		<set_blueB get="inline" set="null" line="146" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaB>
		<get_alphaB get="inline" set="null" line="152" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaB>
		<set_alphaB get="inline" set="null" line="156" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaB>
		<uB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</uB>
		<get_uB get="inline" set="null" line="162" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_uB>
		<set_uB get="inline" set="null" line="166" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_uB>
		<vB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</vB>
		<get_vB get="inline" set="null" line="172" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_vB>
		<set_vB get="inline" set="null" line="176" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_vB>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="183" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="186" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="191" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="194" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="199" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="202" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<redC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redC>
		<get_redC set="method" line="208" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redC>
		<set_redC set="method" line="211" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenC>
		<get_greenC get="inline" set="null" line="217" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenC>
		<set_greenC get="inline" set="null" line="221" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueC>
		<get_blueC get="inline" set="null" line="227" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueC>
		<set_blueC get="inline" set="null" line="231" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaC>
		<get_alphaC get="inline" set="null" line="237" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaC>
		<set_alphaC get="inline" set="null" line="241" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaC>
		<uC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</uC>
		<get_uC get="inline" set="null" line="247" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_uC>
		<set_uC get="inline" set="null" line="251" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_uC>
		<vC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</vC>
		<get_vC get="inline" set="null" line="257" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_vC>
		<set_vC get="inline" set="null" line="261" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_vC>
		<triangle public="1" set="method" line="268" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<triangleUV public="1" set="method" line="293" static="1">
			<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangleUV>
		<adjustWinding public="1" set="method" line="313" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<u public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</u>
		<get_u get="inline" set="null" line="317" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_u>
		<set_u get="inline" set="null" line="321" static="1">
			<f a="this:u_">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_u>
		<v public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</v>
		<get_v get="inline" set="null" line="330" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_v>
		<set_v get="inline" set="null" line="334" static="1">
			<f a="this:v_">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_v>
		<rightU public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</rightU>
		<get_rightU get="inline" set="null" line="344" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rightU>
		<bottomV public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottomV>
		<get_bottomV get="inline" set="null" line="349" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottomV>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="355" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="359" static="1">
			<f a="this:x">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="368" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="372" static="1">
			<f a="this:y">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="381" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="385" static="1">
			<f a="this:z">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="394" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="399" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="404" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="408" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="416" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="421" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="429" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<distHit public="1" set="method" line="434" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</distHit>
		<moveDeltaUV set="method" line="442" static="1">
			<f a="this:du:dv">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDeltaUV>
		<rotate public="1" get="inline" set="null" line="450" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="456" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="485" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="489" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<rgb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="496" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbA>
		<set_rgbA get="inline" set="null" line="504" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbA>
		<get_rgbA get="inline" set="null" line="512" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbB>
		<set_rgbB get="inline" set="null" line="519" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbB>
		<get_rgbB get="inline" set="null" line="527" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbC>
		<set_rgbC get="inline" set="null" line="534" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbC>
		<get_rgbC get="inline" set="null" line="542" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbC>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="549" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="558" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="566" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="575" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="583" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="591" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="599" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="606" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="612" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAllVert>
		<hex public="1" get="inline" set="null" line="623" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexA public="1" get="inline" set="null" line="627" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexA>
		<hexB public="1" get="inline" set="null" line="631" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexB>
		<hexC public="1" get="inline" set="null" line="635" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexC>
		<hexAll public="1" get="inline" set="null" line="639" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<prettyStringUV public="1" get="inline" set="null" line="650" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringUV>
		<prettyAlluv public="1" get="inline" set="null" line="656" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAlluv>
		<prettyEverything public="1" get="inline" set="null" line="667" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyEverything>
		<alphaChannel public="1" get="inline" set="null" line="680" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="683" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="686" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="689" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flatInterleave.FloatColorTrianglesUVt" params="" file="src/dsHelper/flatInterleave/FloatColorTrianglesUVt.hx">
		<from><icast><x path="dsHelper.flatInterleave.core.Flat3x9t"/></icast></from>
		<this><x path="dsHelper.flatInterleave.core.Flat3x9t"/></this>
		<to><icast><x path="dsHelper.flatInterleave.core.Flat3x9t"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave._FloatColorTrianglesUVt.FloatColorTrianglesUVt_Impl_" params="" file="src/dsHelper/flatInterleave/FloatColorTrianglesUVt.hx" private="1" module="dsHelper.flatInterleave.FloatColorTrianglesUVt" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.FloatColorTrianglesUVt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<create public="1" get="inline" set="null" line="9" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTrianglesUVt"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="14" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="17" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="22" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="25" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="33" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<redA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redA>
	<get_redA set="method" line="39" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redA>
	<set_redA set="method" line="42" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenA>
	<get_greenA get="inline" set="null" line="48" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenA>
	<set_greenA get="inline" set="null" line="52" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueA>
	<get_blueA get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueA>
	<set_blueA get="inline" set="null" line="62" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaA>
	<get_alphaA get="inline" set="null" line="68" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaA>
	<set_alphaA get="inline" set="null" line="72" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaA>
	<uA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</uA>
	<get_uA get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_uA>
	<set_uA get="inline" set="null" line="82" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_uA>
	<vA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</vA>
	<get_vA get="inline" set="null" line="88" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_vA>
	<set_vA get="inline" set="null" line="92" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_vA>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="99" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="102" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="110" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="115" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="118" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<redB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redB>
	<get_redB set="method" line="124" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redB>
	<set_redB set="method" line="127" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenB>
	<get_greenB get="inline" set="null" line="133" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenB>
	<set_greenB get="inline" set="null" line="137" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueB>
	<get_blueB get="inline" set="null" line="143" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueB>
	<set_blueB get="inline" set="null" line="147" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaB>
	<get_alphaB get="inline" set="null" line="153" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaB>
	<set_alphaB get="inline" set="null" line="157" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaB>
	<uB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</uB>
	<get_uB get="inline" set="null" line="163" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_uB>
	<set_uB get="inline" set="null" line="167" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_uB>
	<vB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</vB>
	<get_vB get="inline" set="null" line="173" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_vB>
	<set_vB get="inline" set="null" line="177" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_vB>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="184" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="187" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="192" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="195" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="200" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="203" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<redC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redC>
	<get_redC set="method" line="209" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redC>
	<set_redC set="method" line="212" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenC>
	<get_greenC get="inline" set="null" line="218" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenC>
	<set_greenC get="inline" set="null" line="222" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueC>
	<get_blueC get="inline" set="null" line="228" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueC>
	<set_blueC get="inline" set="null" line="232" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaC>
	<get_alphaC get="inline" set="null" line="238" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaC>
	<set_alphaC get="inline" set="null" line="242" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaC>
	<uC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</uC>
	<get_uC get="inline" set="null" line="248" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_uC>
	<set_uC get="inline" set="null" line="252" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_uC>
	<vC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</vC>
	<get_vC get="inline" set="null" line="258" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_vC>
	<set_vC get="inline" set="null" line="262" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_vC>
	<textureId public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</textureId>
	<get_textureId get="inline" set="null" line="268" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_textureId>
	<set_textureId get="inline" set="null" line="272" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_textureId>
	<triangle public="1" set="method" line="278" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<triangleUV public="1" set="method" line="303" static="1">
		<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangleUV>
	<adjustWinding public="1" set="method" line="323" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<u public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</u>
	<get_u get="inline" set="null" line="327" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_u>
	<set_u get="inline" set="null" line="331" static="1">
		<f a="this:u_">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_u>
	<v public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</v>
	<get_v get="inline" set="null" line="340" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_v>
	<set_v get="inline" set="null" line="344" static="1">
		<f a="this:v_">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_v>
	<rightU public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</rightU>
	<get_rightU get="inline" set="null" line="354" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rightU>
	<bottomV public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottomV>
	<get_bottomV get="inline" set="null" line="359" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottomV>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="365" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="369" static="1">
		<f a="this:x">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="378" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="382" static="1">
		<f a="this:y">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="391" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="395" static="1">
		<f a="this:z">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="404" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="409" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="414" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="418" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="426" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="431" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="439" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<moveDeltaUV set="method" line="444" static="1">
		<f a="this:du:dv">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDeltaUV>
	<rotate public="1" get="inline" set="null" line="452" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="458" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="487" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="491" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<rgb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="498" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbA>
	<set_rgbA get="inline" set="null" line="506" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbA>
	<get_rgbA get="inline" set="null" line="514" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbB>
	<set_rgbB get="inline" set="null" line="521" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbB>
	<get_rgbB get="inline" set="null" line="529" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbC>
	<set_rgbC get="inline" set="null" line="536" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbC>
	<get_rgbC get="inline" set="null" line="544" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbC>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="551" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="560" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="568" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="577" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="585" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="593" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="601" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="608" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="614" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAllVert>
	<hex public="1" get="inline" set="null" line="625" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexA public="1" get="inline" set="null" line="629" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexA>
	<hexB public="1" get="inline" set="null" line="633" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexB>
	<hexC public="1" get="inline" set="null" line="637" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexC>
	<hexAll public="1" get="inline" set="null" line="641" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<prettyStringUV public="1" get="inline" set="null" line="652" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringUV>
	<prettyAlluv public="1" get="inline" set="null" line="658" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAlluv>
	<prettyEverything public="1" get="inline" set="null" line="669" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyEverything>
	<alphaChannel public="1" get="inline" set="null" line="682" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="685" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="688" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="691" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave._FloatColorTrianglesUVt.FloatColorTrianglesUVt_Impl_" params="" file="src/dsHelper/flatInterleave/FloatColorTrianglesUVt.hx" private="1" module="dsHelper.flatInterleave.FloatColorTrianglesUVt" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.FloatColorTrianglesUVt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<create public="1" get="inline" set="null" line="9" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTrianglesUVt"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="14" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="17" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="22" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="25" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="33" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<redA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redA>
		<get_redA set="method" line="39" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redA>
		<set_redA set="method" line="42" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenA>
		<get_greenA get="inline" set="null" line="48" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenA>
		<set_greenA get="inline" set="null" line="52" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueA>
		<get_blueA get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueA>
		<set_blueA get="inline" set="null" line="62" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaA>
		<get_alphaA get="inline" set="null" line="68" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaA>
		<set_alphaA get="inline" set="null" line="72" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaA>
		<uA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</uA>
		<get_uA get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_uA>
		<set_uA get="inline" set="null" line="82" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_uA>
		<vA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</vA>
		<get_vA get="inline" set="null" line="88" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_vA>
		<set_vA get="inline" set="null" line="92" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_vA>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="99" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="102" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="110" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="115" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="118" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<redB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redB>
		<get_redB set="method" line="124" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redB>
		<set_redB set="method" line="127" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenB>
		<get_greenB get="inline" set="null" line="133" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenB>
		<set_greenB get="inline" set="null" line="137" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueB>
		<get_blueB get="inline" set="null" line="143" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueB>
		<set_blueB get="inline" set="null" line="147" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaB>
		<get_alphaB get="inline" set="null" line="153" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaB>
		<set_alphaB get="inline" set="null" line="157" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaB>
		<uB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</uB>
		<get_uB get="inline" set="null" line="163" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_uB>
		<set_uB get="inline" set="null" line="167" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_uB>
		<vB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</vB>
		<get_vB get="inline" set="null" line="173" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_vB>
		<set_vB get="inline" set="null" line="177" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_vB>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="184" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="187" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="192" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="195" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="200" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="203" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<redC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redC>
		<get_redC set="method" line="209" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redC>
		<set_redC set="method" line="212" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenC>
		<get_greenC get="inline" set="null" line="218" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenC>
		<set_greenC get="inline" set="null" line="222" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueC>
		<get_blueC get="inline" set="null" line="228" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueC>
		<set_blueC get="inline" set="null" line="232" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaC>
		<get_alphaC get="inline" set="null" line="238" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaC>
		<set_alphaC get="inline" set="null" line="242" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaC>
		<uC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</uC>
		<get_uC get="inline" set="null" line="248" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_uC>
		<set_uC get="inline" set="null" line="252" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_uC>
		<vC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</vC>
		<get_vC get="inline" set="null" line="258" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_vC>
		<set_vC get="inline" set="null" line="262" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_vC>
		<textureId public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</textureId>
		<get_textureId get="inline" set="null" line="268" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_textureId>
		<set_textureId get="inline" set="null" line="272" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_textureId>
		<triangle public="1" set="method" line="278" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<triangleUV public="1" set="method" line="303" static="1">
			<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangleUV>
		<adjustWinding public="1" set="method" line="323" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<u public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</u>
		<get_u get="inline" set="null" line="327" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_u>
		<set_u get="inline" set="null" line="331" static="1">
			<f a="this:u_">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_u>
		<v public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</v>
		<get_v get="inline" set="null" line="340" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_v>
		<set_v get="inline" set="null" line="344" static="1">
			<f a="this:v_">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_v>
		<rightU public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</rightU>
		<get_rightU get="inline" set="null" line="354" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rightU>
		<bottomV public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottomV>
		<get_bottomV get="inline" set="null" line="359" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottomV>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="365" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="369" static="1">
			<f a="this:x">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="378" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="382" static="1">
			<f a="this:y">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="391" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="395" static="1">
			<f a="this:z">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="404" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="409" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="414" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="418" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="426" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="431" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="439" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<moveDeltaUV set="method" line="444" static="1">
			<f a="this:du:dv">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDeltaUV>
		<rotate public="1" get="inline" set="null" line="452" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="458" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="487" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="491" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<rgb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="498" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbA>
		<set_rgbA get="inline" set="null" line="506" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbA>
		<get_rgbA get="inline" set="null" line="514" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbB>
		<set_rgbB get="inline" set="null" line="521" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbB>
		<get_rgbB get="inline" set="null" line="529" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbC>
		<set_rgbC get="inline" set="null" line="536" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbC>
		<get_rgbC get="inline" set="null" line="544" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbC>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="551" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="560" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="568" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="577" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="585" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="593" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="601" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="608" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="614" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAllVert>
		<hex public="1" get="inline" set="null" line="625" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexA public="1" get="inline" set="null" line="629" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexA>
		<hexB public="1" get="inline" set="null" line="633" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexB>
		<hexC public="1" get="inline" set="null" line="637" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexC>
		<hexAll public="1" get="inline" set="null" line="641" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<prettyStringUV public="1" get="inline" set="null" line="652" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringUV>
		<prettyAlluv public="1" get="inline" set="null" line="658" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAlluv>
		<prettyEverything public="1" get="inline" set="null" line="669" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyEverything>
		<alphaChannel public="1" get="inline" set="null" line="682" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="685" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="688" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="691" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="dsHelper.flatInterleave.core.Flat3x7" params="" file="src/dsHelper/flatInterleave/core/Flat3x7.hx">
		<this><x path="dsHelper.flat.io.Float32FlatDepth"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_" params="" file="src/dsHelper/flatInterleave/core/Flat3x7.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x7" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="12" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="22" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="26" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
	<toEnd public="1" get="inline" set="null" line="35" static="1">
		<f a="this:id:len">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toEnd>
	<toStart public="1" get="inline" set="null" line="39" static="1">
		<f a="this:id:len">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toStart>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_" params="" file="src/dsHelper/flatInterleave/core/Flat3x7.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x7" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="12" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="22" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="26" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
		<toEnd public="1" get="inline" set="null" line="35" static="1">
			<f a="this:id:len">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toEnd>
		<toStart public="1" get="inline" set="null" line="39" static="1">
			<f a="this:id:len">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toStart>
	</class>
	<abstract path="dsHelper.flatInterleave.core.Flat3x9" params="" file="src/dsHelper/flatInterleave/core/Flat3x9.hx">
		<from><icast><x path="dsHelper.flat.io.Float32FlatDepth"/></icast></from>
		<this><x path="dsHelper.flat.io.Float32FlatDepth"/></this>
		<to><icast><x path="dsHelper.flat.io.Float32FlatDepth"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave.core._Flat3x9.Flat3x9_Impl_" params="" file="src/dsHelper/flatInterleave/core/Flat3x9.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x9" final="1">
	<readItem public="1" get="inline" set="null" line="7" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="11" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.core.Flat3x9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="25" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
	<toEnd public="1" get="inline" set="null" line="34" static="1">
		<f a="this:id:len">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toEnd>
	<toStart public="1" get="inline" set="null" line="38" static="1">
		<f a="this:id:len">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toStart>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave.core._Flat3x9.Flat3x9_Impl_" params="" file="src/dsHelper/flatInterleave/core/Flat3x9.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x9" final="1">
		<readItem public="1" get="inline" set="null" line="7" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="11" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.core.Flat3x9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="25" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
		<toEnd public="1" get="inline" set="null" line="34" static="1">
			<f a="this:id:len">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toEnd>
		<toStart public="1" get="inline" set="null" line="38" static="1">
			<f a="this:id:len">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toStart>
	</class>
	<abstract path="dsHelper.flatInterleave.core.Flat3x9t" params="" file="src/dsHelper/flatInterleave/core/Flat3x9t.hx">
		<from><icast><x path="dsHelper.flat.io.Float32FlatDepth"/></icast></from>
		<this><x path="dsHelper.flat.io.Float32FlatDepth"/></this>
		<to><icast><x path="dsHelper.flat.io.Float32FlatDepth"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave.core._Flat3x9t.Flat3x9t_Impl_" params="" file="src/dsHelper/flatInterleave/core/Flat3x9t.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x9t" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="12" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="22" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="26" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
	<toEnd public="1" get="inline" set="null" line="35" static="1">
		<f a="this:id:len">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toEnd>
	<toStart public="1" get="inline" set="null" line="39" static="1">
		<f a="this:id:len">
			<x path="dsHelper.flat.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toStart>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave.core._Flat3x9t.Flat3x9t_Impl_" params="" file="src/dsHelper/flatInterleave/core/Flat3x9t.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x9t" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="12" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.core.Flat3x9t"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="22" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="26" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
		<toEnd public="1" get="inline" set="null" line="35" static="1">
			<f a="this:id:len">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toEnd>
		<toStart public="1" get="inline" set="null" line="39" static="1">
			<f a="this:id:len">
				<x path="dsHelper.flat.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toStart>
	</class>
	<typedef path="dsHelper.haxe.io.Float32Array" params="" file="src/dsHelper/haxe/io/Float32Array.hx">
		<x path="haxe.io.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<typedef path="dsHelper.haxe.io.Float64Array" params="" file="src/dsHelper/haxe/io/Float64Array.hx">
		<x path="haxe.io.Float64Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float64Array</haxe_doc>
	</typedef>
	<typedef path="dsHelper.haxe.io.Int32Array" params="" file="src/dsHelper/haxe/io/Int32Array.hx">
		<x path="haxe.io.Int32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Int32Array</haxe_doc>
	</typedef>
	<typedef path="dsHelper.haxe.io.UInt16Array" params="" file="src/dsHelper/haxe/io/UInt16Array.hx">
		<x path="haxe.io.UInt16Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.UInt16Array</haxe_doc>
	</typedef>
	<typedef path="dsHelper.haxe.io.UInt32Array" params="" file="src/dsHelper/haxe/io/UInt32Array.hx">
		<x path="haxe.io.UInt32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.UInt16Array</haxe_doc>
	</typedef>
	<typedef path="dsHelper.haxe.io.UInt8Array" params="" file="src/dsHelper/haxe/io/UInt8Array.hx">
		<x path="haxe.io.UInt8Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.UInt8Array</haxe_doc>
	</typedef>
	<abstract path="dsHelper.iterArr.ArrayDozen" params="T" file="src/dsHelper/iterArr/ArrayDozen.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayDozen.ArrayDozen_Impl_" params="" file="src/dsHelper/iterArr/ArrayDozen.hx" private="1" module="dsHelper.iterArr.ArrayDozen" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
			<x path="dsHelper.iterArr.ArrayDozen"><c path="dsHelper.iterArr.ArrayDozen.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
			<x path="Int"/>
			<a>
				<l><c path="dsHelper.iterArr.ArrayDozen.T"/></l>
				<k><c path="dsHelper.iterArr.ArrayDozen.T"/></k>
				<j><c path="dsHelper.iterArr.ArrayDozen.T"/></j>
				<i><c path="dsHelper.iterArr.ArrayDozen.T"/></i>
				<h><c path="dsHelper.iterArr.ArrayDozen.T"/></h>
				<g><c path="dsHelper.iterArr.ArrayDozen.T"/></g>
				<f><c path="dsHelper.iterArr.ArrayDozen.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayDozen.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayDozen.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayDozen.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayDozen.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="11" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
			<x path="Int"/>
			<a>
				<l><c path="dsHelper.iterArr.ArrayDozen.T"/></l>
				<k><c path="dsHelper.iterArr.ArrayDozen.T"/></k>
				<j><c path="dsHelper.iterArr.ArrayDozen.T"/></j>
				<i><c path="dsHelper.iterArr.ArrayDozen.T"/></i>
				<h><c path="dsHelper.iterArr.ArrayDozen.T"/></h>
				<g><c path="dsHelper.iterArr.ArrayDozen.T"/></g>
				<f><c path="dsHelper.iterArr.ArrayDozen.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayDozen.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayDozen.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayDozen.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayDozen.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="21" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayDozen.ArrayDozen_Impl_" params="" file="src/dsHelper/iterArr/ArrayDozen.hx" private="1" module="dsHelper.iterArr.ArrayDozen" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<x path="dsHelper.iterArr.ArrayDozen"><c path="dsHelper.iterArr.ArrayDozen.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<x path="Int"/>
				<a>
					<l><c path="dsHelper.iterArr.ArrayDozen.T"/></l>
					<k><c path="dsHelper.iterArr.ArrayDozen.T"/></k>
					<j><c path="dsHelper.iterArr.ArrayDozen.T"/></j>
					<i><c path="dsHelper.iterArr.ArrayDozen.T"/></i>
					<h><c path="dsHelper.iterArr.ArrayDozen.T"/></h>
					<g><c path="dsHelper.iterArr.ArrayDozen.T"/></g>
					<f><c path="dsHelper.iterArr.ArrayDozen.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayDozen.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayDozen.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayDozen.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayDozen.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="11" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<x path="Int"/>
				<a>
					<l><c path="dsHelper.iterArr.ArrayDozen.T"/></l>
					<k><c path="dsHelper.iterArr.ArrayDozen.T"/></k>
					<j><c path="dsHelper.iterArr.ArrayDozen.T"/></j>
					<i><c path="dsHelper.iterArr.ArrayDozen.T"/></i>
					<h><c path="dsHelper.iterArr.ArrayDozen.T"/></h>
					<g><c path="dsHelper.iterArr.ArrayDozen.T"/></g>
					<f><c path="dsHelper.iterArr.ArrayDozen.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayDozen.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayDozen.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayDozen.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayDozen.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="21" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayDozen.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.iterArr.ArrayHexagon" params="T" file="src/dsHelper/iterArr/ArrayHexagon.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayHexagon.ArrayHexagon_Impl_" params="" file="src/dsHelper/iterArr/ArrayHexagon.hx" private="1" module="dsHelper.iterArr.ArrayHexagon" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
			<x path="dsHelper.iterArr.ArrayHexagon"><c path="dsHelper.iterArr.ArrayHexagon.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
			<x path="Int"/>
			<a>
				<f><c path="dsHelper.iterArr.ArrayHexagon.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayHexagon.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayHexagon.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayHexagon.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayHexagon.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="11" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
			<x path="Int"/>
			<a>
				<f><c path="dsHelper.iterArr.ArrayHexagon.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayHexagon.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayHexagon.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayHexagon.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayHexagon.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="20" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayHexagon.ArrayHexagon_Impl_" params="" file="src/dsHelper/iterArr/ArrayHexagon.hx" private="1" module="dsHelper.iterArr.ArrayHexagon" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<x path="dsHelper.iterArr.ArrayHexagon"><c path="dsHelper.iterArr.ArrayHexagon.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<x path="Int"/>
				<a>
					<f><c path="dsHelper.iterArr.ArrayHexagon.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayHexagon.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayHexagon.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayHexagon.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayHexagon.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="11" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<x path="Int"/>
				<a>
					<f><c path="dsHelper.iterArr.ArrayHexagon.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayHexagon.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayHexagon.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayHexagon.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayHexagon.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="20" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexagon.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<abstract path="dsHelper.iterArr.ArrayHexakaidecagon" params="T" file="src/dsHelper/iterArr/ArrayHexakaidecagon.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayHexakaidecagon.ArrayHexakaidecagon_Impl_" params="" file="src/dsHelper/iterArr/ArrayHexakaidecagon.hx" private="1" module="dsHelper.iterArr.ArrayHexakaidecagon" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
			<x path="dsHelper.iterArr.ArrayHexakaidecagon"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
			<x path="Int"/>
			<a>
				<p><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></p>
				<o><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></o>
				<n><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></n>
				<m><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></m>
				<l><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></l>
				<k><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></k>
				<j><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></j>
				<i><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></i>
				<h><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></h>
				<g><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></g>
				<f><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="12" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
			<x path="Int"/>
			<a>
				<p><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></p>
				<o><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></o>
				<n><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></n>
				<m><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></m>
				<l><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></l>
				<k><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></k>
				<j><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></j>
				<i><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></i>
				<h><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></h>
				<g><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></g>
				<f><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="24" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayHexakaidecagon.ArrayHexakaidecagon_Impl_" params="" file="src/dsHelper/iterArr/ArrayHexakaidecagon.hx" private="1" module="dsHelper.iterArr.ArrayHexakaidecagon" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<x path="dsHelper.iterArr.ArrayHexakaidecagon"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<x path="Int"/>
				<a>
					<p><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></p>
					<o><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></o>
					<n><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></n>
					<m><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></m>
					<l><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></l>
					<k><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></k>
					<j><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></j>
					<i><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></i>
					<h><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></h>
					<g><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></g>
					<f><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="12" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<x path="Int"/>
				<a>
					<p><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></p>
					<o><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></o>
					<n><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></n>
					<m><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></m>
					<l><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></l>
					<k><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></k>
					<j><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></j>
					<i><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></i>
					<h><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></h>
					<g><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></g>
					<f><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="24" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayHexakaidecagon.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<abstract path="dsHelper.iterArr.ArrayNonagon" params="T" file="src/dsHelper/iterArr/ArrayNonagon.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayNonagon.ArrayNonagon_Impl_" params="" file="src/dsHelper/iterArr/ArrayNonagon.hx" private="1" module="dsHelper.iterArr.ArrayNonagon" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
			<x path="dsHelper.iterArr.ArrayNonagon"><c path="dsHelper.iterArr.ArrayNonagon.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
			<x path="Int"/>
			<a>
				<i><c path="dsHelper.iterArr.ArrayNonagon.T"/></i>
				<h><c path="dsHelper.iterArr.ArrayNonagon.T"/></h>
				<g><c path="dsHelper.iterArr.ArrayNonagon.T"/></g>
				<f><c path="dsHelper.iterArr.ArrayNonagon.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayNonagon.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayNonagon.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayNonagon.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayNonagon.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="11" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
			<x path="Int"/>
			<a>
				<i><c path="dsHelper.iterArr.ArrayNonagon.T"/></i>
				<h><c path="dsHelper.iterArr.ArrayNonagon.T"/></h>
				<g><c path="dsHelper.iterArr.ArrayNonagon.T"/></g>
				<f><c path="dsHelper.iterArr.ArrayNonagon.T"/></f>
				<e><c path="dsHelper.iterArr.ArrayNonagon.T"/></e>
				<d><c path="dsHelper.iterArr.ArrayNonagon.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayNonagon.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayNonagon.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="20" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayNonagon.ArrayNonagon_Impl_" params="" file="src/dsHelper/iterArr/ArrayNonagon.hx" private="1" module="dsHelper.iterArr.ArrayNonagon" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<x path="dsHelper.iterArr.ArrayNonagon"><c path="dsHelper.iterArr.ArrayNonagon.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<x path="Int"/>
				<a>
					<i><c path="dsHelper.iterArr.ArrayNonagon.T"/></i>
					<h><c path="dsHelper.iterArr.ArrayNonagon.T"/></h>
					<g><c path="dsHelper.iterArr.ArrayNonagon.T"/></g>
					<f><c path="dsHelper.iterArr.ArrayNonagon.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayNonagon.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayNonagon.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayNonagon.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayNonagon.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="11" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<x path="Int"/>
				<a>
					<i><c path="dsHelper.iterArr.ArrayNonagon.T"/></i>
					<h><c path="dsHelper.iterArr.ArrayNonagon.T"/></h>
					<g><c path="dsHelper.iterArr.ArrayNonagon.T"/></g>
					<f><c path="dsHelper.iterArr.ArrayNonagon.T"/></f>
					<e><c path="dsHelper.iterArr.ArrayNonagon.T"/></e>
					<d><c path="dsHelper.iterArr.ArrayNonagon.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayNonagon.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayNonagon.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="20" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayNonagon.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<abstract path="dsHelper.iterArr.ArrayPairs" params="T" file="src/dsHelper/iterArr/ArrayPairs.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="src/dsHelper/iterArr/ArrayPairs.hx" private="1" module="dsHelper.iterArr.ArrayPairs" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="dsHelper.iterArr.ArrayPairs"><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
				<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
				<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="src/dsHelper/iterArr/ArrayPairs.hx" private="1" module="dsHelper.iterArr.ArrayPairs" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="dsHelper.iterArr.ArrayPairs"><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
					<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
					<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<abstract path="dsHelper.iterArr.ArrayQuad" params="T" file="src/dsHelper/iterArr/ArrayQuad.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayQuad.ArrayQuad_Impl_" params="" file="src/dsHelper/iterArr/ArrayQuad.hx" private="1" module="dsHelper.iterArr.ArrayQuad" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
			<x path="dsHelper.iterArr.ArrayQuad"><c path="dsHelper.iterArr.ArrayQuad.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
			<x path="Int"/>
			<a>
				<d><c path="dsHelper.iterArr.ArrayQuad.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayQuad.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayQuad.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
			<x path="Int"/>
			<a>
				<d><c path="dsHelper.iterArr.ArrayQuad.T"/></d>
				<c><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayQuad.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayQuad.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayQuad.ArrayQuad_Impl_" params="" file="src/dsHelper/iterArr/ArrayQuad.hx" private="1" module="dsHelper.iterArr.ArrayQuad" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<x path="dsHelper.iterArr.ArrayQuad"><c path="dsHelper.iterArr.ArrayQuad.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<x path="Int"/>
				<a>
					<d><c path="dsHelper.iterArr.ArrayQuad.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayQuad.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayQuad.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<x path="Int"/>
				<a>
					<d><c path="dsHelper.iterArr.ArrayQuad.T"/></d>
					<c><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayQuad.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayQuad.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayQuad.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<abstract path="dsHelper.iterArr.ArrayTriple" params="T" file="src/dsHelper/iterArr/ArrayTriple.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="src/dsHelper/iterArr/ArrayTriple.hx" private="1" module="dsHelper.iterArr.ArrayTriple" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="dsHelper.iterArr.ArrayTriple"><c path="dsHelper.iterArr.ArrayTriple.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="src/dsHelper/iterArr/ArrayTriple.hx" private="1" module="dsHelper.iterArr.ArrayTriple" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="dsHelper.iterArr.ArrayTriple"><c path="dsHelper.iterArr.ArrayTriple.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<class path="dsHelper.splitter.CSV" params="" file="src/dsHelper/splitter/CSV.hx"><parse public="1" get="inline" set="null" line="5" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></parse></class>
	<class path="dsHelper.splitter.SpaceSplitter" params="" file="src/dsHelper/splitter/SpaceSplitter.hx"><parse public="1" get="inline" set="null" line="5" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></parse></class>
	<class path="dsHelper.splitter.StringCodeIterator" params="" file="src/dsHelper/splitter/StringCodeIterator.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<b><c path="StringBuf"/></b>
		<pos public="1"><x path="Int"/></pos>
		<c public="1"><x path="Int"/></c>
		<last2 public="1"><c path="String"/></last2>
		<last public="1"><c path="String"/></last>
		<length public="1"><x path="Int"/></length>
		<addChar public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></addChar>
		<toStr public="1" get="inline" set="null" line="21"><f a=""><c path="String"/></f></toStr>
		<isRepeat public="1" get="inline" set="null" line="27"><f a=""><x path="Bool"/></f></isRepeat>
		<resetBuffer public="1" get="inline" set="null" line="33"><f a=""><x path="Void"/></f></resetBuffer>
		<reset public="1" get="inline" set="null" line="37"><f a=""><x path="Void"/></f></reset>
		<hasNext public="1" get="inline" set="null" line="41"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="45"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="11">
			<f a="str_:?pos_" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pos_ : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><c path="js.lib.Float64Array"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><c path="js.lib.Int32Array"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><c path="js.lib.Uint16Array"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><c path="js.lib.Uint32Array"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><c path="js.lib.Uint8Array"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<unknown/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/usr/local/lib/haxe/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="69" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="100" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="110" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="122" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.lib.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="js.lib.DataView" params="" file="/usr/local/lib/haxe/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Float32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Int32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Object"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="66">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint16Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
</haxe>